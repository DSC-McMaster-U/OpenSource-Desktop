{"version":3,"sources":["App.js","managementTab/ledger/LedgerItem.js","managementTab/ledger/dummyData.js","managementTab/ledger/form.js","managementTab/ledger/Ledger.js","managementTab/shoppingList/shoppingListItem.js","managementTab/shoppingList/dummyData.js","managementTab/shoppingList/shoppingForm.js","managementTab/shoppingList/shoppingList.js","managementTab/choreList/dummyData.js","managementTab/choreList/choreListItem.js","managementTab/choreList/choreListForm.js","managementTab/choreList/choreList.js","index.js"],"names":["App","className","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","LedgerItem","props","classes","React","useState","checked","setChecked","open","setOpen","handleClick","ListItem","ListItemText","primary","items","name","button","onClick","FormControlLabel","control","Checkbox","onChange","event","target","parentNode","parentElement","style","color","labelPlacement","Collapse","in","timeout","unmountOnExit","Card","variant","CardContent","Typography","gutterBottom","dueDate","component","amount","description","financesData","identityNumber","payees","StyledButton","withStyles","backgroundColor","border","size","Button","names","getStyles","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","formControl","spacing","maxWidth","chips","flexWrap","chip","noLabel","marginTop","multPickerStyle","borderRadius","width","datePickerStyle","padding","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","NumberFormatCustom","inputRef","other","getInputRef","onValueChange","values","value","thousandSeparator","isNumericString","prefix","LedgerForm","onClose","selectedValue","useTheme","setPersonName","Date","dateValue","setDateValue","numberformat","nameValue","setNameValue","descValue","setDescValue","priceValue","setPriceValue","handleClose","Dialog","aria-labelledby","DialogTitle","id","utils","DateFnsUtils","Grid","container","justify","TextField","label","e","required","multiline","rows","defaultValue","disableToolbar","format","date","KeyboardButtonProps","InputProps","inputComponent","FormControl","InputLabel","paddingLeft","mx","p","Select","labelId","multiple","input","Input","renderValue","selected","map","Chip","MenuItem","output","getMonth","String","getDate","padStart","getFullYear","push","length","Form","propTypes","PropTypes","func","isRequired","bool","string","Ledger","Row","item","index","Divider","setSelectedValue","textAlign","List","ShoppingListItem","console","log","dateAdded","shoppingListData","ShoppingListForm","ShoppingList","users","choreListData","peopleNeeded","assigned","personAssignedTo","ChoreListItem","forceUpdate","setValue","useForceUpdate","randomNumber","Math","floor","random","userName","ChoreListForm","peopleNeededValue","ChoreList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAUeA,MARf,WACC,OACC,qBAAKC,UAAU,MAAf,0B,kJCaIC,G,MAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,OA6EHC,MAxEf,SAAoBC,GAClB,IAAMC,EAAUd,IADS,EAIKe,IAAMC,UAAS,GAJpB,mBAIlBC,EAJkB,KAITC,EAJS,OAKDH,IAAMC,UAAS,GALd,mBAKlBG,EALkB,KAKZC,EALY,KAQnBC,EAAc,WAClBD,GAASD,IAaX,OAEE,cADA,CACA,iBAEE,eAACG,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAcC,QAASX,EAAMY,MAAMC,KAAMC,QAAM,EAACC,QAASP,IACxDF,EACC,cAAC,IAAD,CAAYQ,QAAM,EAACC,QAASP,IAE5B,cAAC,IAAD,CAAYM,QAAM,EAACC,QAASP,IAE9B,cAACQ,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEd,QAASA,EACTe,SAxBS,SAACC,GACpBf,EAAWe,EAAMC,OAAOjB,SAEtBgB,EAAMC,OAAOC,WAAWC,cAAcA,cAAcA,cACjDA,cAAcC,MACNhC,QAAU,QAoBbqB,KAAK,WACLY,MAAM,YAGVC,eAAe,aAInB,cAACC,EAAA,EAAD,CAAUC,GAAItB,EAAMuB,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACC,EAAA,EAAD,CAAM7C,UAAWe,EAAQZ,KAAM2C,QAAQ,WAAvC,SACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEhD,UAAWe,EAAQN,MACnB8B,MAAM,gBACNU,cAAY,EAHd,oBAKUnC,EAAMY,MAAMwB,WAEtB,cAACF,EAAA,EAAD,CAAYF,QAAQ,KAAKK,UAAU,KAAnC,SACGrC,EAAMY,MAAMC,OAEf,eAACqB,EAAA,EAAD,CAAYhD,UAAWe,EAAQJ,IAAK4B,MAAM,gBAA1C,kBACQzB,EAAMY,MAAM0B,UAEpB,cAACJ,EAAA,EAAD,CAAYF,QAAQ,QAAQK,UAAU,IAAtC,SACGrC,EAAMY,MAAM2B,yBCnDZC,EA/CM,CACjB,CACIC,eAAgB,EAChB5B,KAAM,OACN0B,YAAa,kBACbH,QAAS,mBACTE,OAAQ,IACRI,OAAQ,CAAC,QAAQ,KAAK,UAAU,QAAQ,OAAO,UAEnD,CACID,eAAgB,EAChB5B,KAAM,UACN0B,YAAa,6BACbH,QAAQ,mBACRE,OAAQ,IACRI,OAAQ,CAAC,QAAQ,QAAQ,SAE7B,CACID,eAAgB,EAChB5B,KAAM,YACN0B,YAAa,4BACbD,OAAQ,IACRF,QAAQ,mBACRM,OAAQ,CAAC,QAAQ,KAAK,UAAU,QAAQ,OAAO,UAEnD,CACID,eAAgB,EAChB5B,KAAM,SAEN0B,YAAa,qCACbH,QAAQ,mBACRE,OAAQ,IACRI,OAAQ,CAAC,QAAQ,KAAK,UAAU,QAAQ,OAAO,W,6LCPjDC,EAAeC,YAAW,CAC5BvD,KAAM,CACJ,UAAU,CACRwD,gBAAiB,UACjBC,OAAQ,qBAEVC,KAAM,QACNtB,MAAO,UACPqB,OAAQ,sBAROF,CAUhBI,KAICC,EAAQ,CACV,QACA,KACA,QACA,QACA,SACA,iBACA,UAIJ,SAASC,EAAUrC,EAAMsC,EAAYC,GACrC,MAAO,CACHC,YAC8B,IAA9BF,EAAWG,QAAQzC,GACbuC,EAAMG,WAAWC,kBACjBJ,EAAMG,WAAWE,kBAK3B,IAAMtE,GAAYC,aAAW,SAACgE,GAAD,MAAY,CACrCM,YAAa,CACXjE,OAAQ2D,EAAMO,QAAQ,GACtBrE,SAAU,IACVsE,SAAU,KAEZC,MAAO,CACLrE,QAAS,OACTsE,SAAU,QAEZC,KAAM,CACJtE,OAAQ,GAEVuE,QAAS,CACPC,UAAWb,EAAMO,QAAQ,QAKzBO,GAAgB,CAClBrB,gBAAgB,UAChBsB,aAAa,MACbC,MAAM,SAIJC,GAAgB,CAClBxB,gBAAgB,UAChBsB,aAAc,MACdG,QAAS,OACTF,MAAM,SAOJG,GAAY,CAClBC,WAAY,CACRhD,MAAO,CACPiD,UAAWC,IACXN,MAAO,IACPR,SAAU,OAWd,SAASe,GAAmB3E,GAAQ,IAC5B4E,EAAiC5E,EAAjC4E,SAAUzD,EAAuBnB,EAAvBmB,SAAa0D,EADI,YACM7E,EADN,yBAEnC,OACI,cAAC,IAAD,2BACI6E,GADJ,IAEAC,YAAaF,EACbG,cAAe,SAACC,GACZ7D,EAAS,CACTE,OAAQ,CACJR,KAAMb,EAAMa,KACZoE,MAAOD,EAAOC,UAItBC,mBAAiB,EACjBC,iBAAe,EACfC,OAAO,OA8NIC,OApNf,SAAoBrF,GAAO,IAEfsF,EAAiCtF,EAAjCsF,QAASC,EAAwBvF,EAAxBuF,cAAejF,EAASN,EAATM,KAG1BL,EAAUd,KACViE,EAAQoC,cANS,EAQatF,IAAMC,SAAS,IAR5B,mBAQhBgD,EARgB,KAQJsC,EARI,OASWvF,IAAMC,SAAS,IAAIuF,MAT9B,mBAShBC,EATgB,KASLC,EATK,OAUI1F,IAAMC,SAAS,CACtC0F,aAAc,SAXK,gCAaW3F,IAAMC,SAAS,KAb1B,mBAahB2F,EAbgB,KAaLC,EAbK,OAcW7F,IAAMC,SAAS,IAd1B,mBAchB6F,EAdgB,KAcLC,EAdK,OAeY/F,IAAMC,WAflB,mBAehB+F,EAfgB,KAeLC,EAfK,KAkBjBC,EAAc,WAChBd,EAAQC,IA0DZ,OAGI,cADA,CACCc,EAAA,EAAD,CAASf,QAASc,EAAaE,kBAAgB,sBAAsBhG,KAAMA,EAA3E,UACI,cAACiG,EAAA,EAAD,CAAaC,GAAG,sBAAhB,2BACA,eAAC,IAAD,CAAyBC,MAAOC,IAAhC,UAEI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACI,cAACC,EAAA,EAAD,CACAN,GAAG,+BACHO,MAAM,OACN/E,QAAQ,SACRiD,MAAOa,EACP3E,SAvDS,SAAA6F,GACrBjB,EAAaiB,EAAE3F,OAAO4D,QAwDVgC,SAAS,WAGb,eAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UAIA,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SAEI,cAACC,EAAA,EAAD,CACArH,OAAO,SACP+G,GAAG,4BACHO,MAAM,cACNG,WAAS,EACTC,KAAM,EACNC,aAAa,GACbnC,MAAOe,EACP7E,SApES,SAAA6F,GACrBf,EAAae,EAAE3F,OAAO4D,QAoEVjD,QAAQ,aAQZ,cAAC2E,EAAA,EAAD,CAAOC,WAAS,EAACC,QAAQ,SAAzB,SAEI,cAAC,IAAD,CACArF,MAAO6C,GACPgD,gBAAc,EACdrF,QAAQ,SACRsF,OAAO,aACP7H,OAAO,SACP+G,GAAG,qBACHO,MAAM,WACN9B,MAAOU,EACPsB,SAAS,OACT9F,SAtGS,SAACoG,GACtB3B,EAAa2B,IAsGDC,oBAAqB,CACjB,aAAc,mBAOtB,eAACb,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UAEI,cAACC,EAAA,EAAD,CACA7B,MAAOiB,EACP/E,SAjGU,SAAA6F,GACtBb,EAAca,EAAE3F,OAAO4D,QAiGXgC,SAAS,OACTjF,QAAQ,SACR+E,MAAM,QACNlG,KAAK,eACL2F,GAAG,+BACHiB,WAAY,CACZC,eAAgB/C,MAGhB,0BAGJ,cAACgC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACI,eAACc,EAAA,EAAD,CAAanG,MAAO0C,GAAiBhF,UAAWe,EAAQyD,YAAxD,UACA,cAACkE,EAAA,EAAD,CACApG,MAAO,CACHqG,YAAa,QAEjBC,GAAG,OACHC,EAAG,GACHvB,GAAG,0BANH,2BASA,cAACwB,EAAA,EAAD,CACAjB,MAAM,gBACNkB,QAAQ,0BACRzB,GAAG,oBACH0B,UAAQ,EACRjD,MAAO9B,EACPhC,SAtJK,SAACC,GAClBqE,EAAcrE,EAAMC,OAAO4D,QAsJfkD,MAAO,cAACC,EAAA,EAAD,CAAO5B,GAAG,yBACjB6B,YAAa,SAACC,GAAD,OACT,qBAAKpJ,UAAWe,EAAQ4D,MAAxB,SACCyE,EAASC,KAAI,SAACtD,GAAD,OACV,cAACuD,EAAA,EAAD,CAAkBzB,MAAO9B,EAAO/F,UAAWe,EAAQ8D,MAAxCkB,SAInBV,UAAWA,GAfX,SAiBCtB,EAAMsF,KAAI,SAAC1H,GAAD,OACP,cAAC4H,EAAA,EAAD,CAAqBxD,MAAOpE,EAAMW,MAAO0B,EAAUrC,EAAMsC,EAAYC,GAArE,SACCvC,GADcA,aASvB,eAAC8F,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UAEI,uBACA,cAAClE,EAAD,CAAcX,QAAQ,WAAWP,MAAM,UAAUV,QAjJ3C,WAClBqF,IAEA,IAKMsC,EALa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OACpE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC7B/C,EAAUgD,YAGX,KAFZC,OAAOjD,EAAUkD,WAAWC,SAAS,EAAG,KAEf,IADxBnD,EAAUoD,cAIvBvG,EAAawG,KAAK,CACdvG,eAAgBD,EAAayG,OAC7BpI,KAAMiF,EACNvD,YAAayD,EACb5D,QAAQsG,EACRpG,OAAQ4D,EACRxD,OAAQS,KAgIA,iCC7SpB+F,GAAKC,UAAY,CACf7D,QAAS8D,IAAUC,KAAKC,WACxBhJ,KAAM8I,IAAUG,KAAKD,WACrB/D,cAAe6D,IAAUI,OAAOF,YAuEnBG,OAnEf,WAEE,IAAIC,EAAMlH,EAAa+F,KAAI,SAACoB,EAAMC,GAChC,OACE,gCACE,cAAC,EAAD,CAAYhJ,MAAO4B,EAAaoH,KAChC,cAACC,EAAA,EAAD,CAAS7H,QAAQ,iBANP,EAYQ9B,IAAMC,UAAS,GAZvB,mBAYTG,EAZS,KAYHC,EAZG,OAa0BL,IAAMC,SAAS,IAbzC,mBAaToF,EAbS,KAaMuE,EAbN,KA2BhB,OAEE,cADA,CACA,OAAKtI,MAAO,CAAEuI,UAAW,UAAzB,UAEE,eAACC,EAAA,EAAD,CACE9K,UAAU,SACVS,MAAM,SACN6B,MAAO,CACL4C,MAAO,QACP3E,OAAQ,OACRoD,gBAAiB,WANrB,UAUE,oBAAIrB,MAAO,CAAE5B,SAAU,OAAQmK,UAAW,SAAUtI,MAAO,SAA3D,oBAICiI,EAED,eAAC1G,EAAA,EAAD,CACEjC,QAhCgB,WACtBR,GAAQ,IAgCFiB,MAAO,CAAEC,MAAO,WAFlB,sBAIW,cAAC,IAAD,IAAY,UAGzB,uBAGA,cAAC,GAAD,CAAM8D,cAAeA,EAAejF,KAAMA,EAAMgF,QApChC,SAACL,GACnB1E,GAAQ,GACRuJ,EAAiB7E,MAqCf,uBACA,uBACA,uBACA,2BCvFA9F,I,OAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,OAkELmK,OA7Df,SAA0BjK,GACxB,IAAMC,EAAUd,KADc,EAIFe,IAAMC,UAAS,GAJb,mBAIvBC,EAJuB,KAIfC,EAJe,OAKNH,IAAMC,UAAS,GALT,mBAKvBG,EALuB,KAKjBC,EALiB,KAQxBC,EAAc,WAChBD,GAASD,IAYb,OAEI,cADF,CACE,iBAEA,eAACG,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAcC,QAASX,EAAMY,MAAMC,KAAMC,QAAM,EAACC,QAASP,IACxDF,EAAO,cAAC,IAAD,CAAYQ,QAAM,EAACC,QAASP,IAAiB,cAAC,IAAD,CAAYM,QAAM,EAACC,QAASP,IACjF,cAACQ,EAAA,EAAD,CACAC,QACE,cAACC,EAAA,EAAD,CACEd,QAASA,EACTe,SAnBa,SAACC,GAClBf,EAAWe,EAAMC,OAAOjB,SACxB8J,QAAQC,IAAI/I,EAAMC,OAAOC,WAAWC,cAAcA,cAAcA,cAAcA,eAC9EH,EAAMC,OAAOC,WAAWC,cAAcA,cAAcA,cAAcA,cAAcC,MAAMhC,QAAU,OAChG0K,QAAQC,IAAI/I,EAAMC,OAAOC,WAAWC,cAAcA,cAAcA,cAAcA,cAAcC,MAAMhC,UAgB9FqB,KAAK,WACLY,MAAM,YAGVC,eAAe,aAIjB,cAACC,EAAA,EAAD,CAAUC,GAAItB,EAAMuB,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACC,EAAA,EAAD,CAAM7C,UAAWe,EAAQZ,KAAM2C,QAAQ,WAAvC,SACA,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYhD,UAAWe,EAAQN,MAAO8B,MAAM,gBAAgBU,cAAY,EAAxE,oBACQnC,EAAMY,MAAMwJ,aAEpB,cAAClI,EAAA,EAAD,CAAYF,QAAQ,KAAKK,UAAU,KAAnC,SACCrC,EAAMY,MAAMC,OAGb,cAACqB,EAAA,EAAD,CAAYF,QAAQ,QAAQK,UAAU,IAAtC,SACCrC,EAAMY,MAAM2B,yBClER8H,GAtBU,CACrB,CACI,eAAiB,EACjB,KAAQ,aACR,YAAe,GACf,UAAa,kBAEjB,CACI,eAAiB,EACjB,KAAQ,eACR,YAAe,GACf,UAAa,kBAEjB,CACI,eAAiB,EACjB,KAAQ,eACR,YAAe,0BACf,UAAa,mBCAf1H,GAAeC,YAAW,CAC5BvD,KAAM,CACJ,UAAU,CACRwD,gBAAiB,UACjBC,OAAQ,qBAEVC,KAAM,QACNtB,MAAO,UACPqB,OAAQ,sBAROF,CAUhBI,KAIC7D,GAAYC,aAAW,SAACgE,GAAD,MAAY,CACrCM,YAAa,CACXjE,OAAQ2D,EAAMO,QAAQ,GACtBrE,SAAU,IACVsE,SAAU,KAEZC,MAAO,CACLrE,QAAS,OACTsE,SAAU,QAEZC,KAAM,CACJtE,OAAQ,GAEVuE,QAAS,CACPC,UAAWb,EAAMO,QAAQ,QAKzBU,GAAgB,CAClBxB,gBAAgB,UAChBsB,aAAc,MACdG,QAAS,OACTF,MAAM,SAgMKkG,OAlJf,SAA0BtK,GAAO,IAErBsF,EAAiCtF,EAAjCsF,QAASC,EAAwBvF,EAAxBuF,cAAejF,EAASN,EAATM,KAFH,GAKbnB,KACFqG,cAGsBtF,IAAMC,SAAS,KATtB,gCAUKD,IAAMC,SAAS,IAAIuF,OAVxB,mBAUtBC,EAVsB,KAUXC,EAVW,OAWF1F,IAAMC,SAAS,CACtC0F,aAAc,SAZW,gCAcK3F,IAAMC,SAAS,KAdpB,mBActB2F,EAdsB,KAcXC,EAdW,OAeK7F,IAAMC,SAAS,IAfpB,mBAetB6F,EAfsB,KAeXC,EAfW,OAgBM/F,IAAMC,WAhBZ,mBAmBvBiG,GAnBuB,UAmBT,WAChBd,EAAQC,KA6CZ,OAEI,cADA,CACCc,EAAA,EAAD,CAASf,QAASc,EAAaE,kBAAgB,sBAAsBhG,KAAMA,EAA3E,UACI,cAACiG,EAAA,EAAD,CAAaC,GAAG,sBAAhB,kCACA,eAAC,IAAD,CAAyBC,MAAOC,IAAhC,UAEI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACI,cAACC,EAAA,EAAD,CACAN,GAAG,+BACHO,MAAM,YACN/E,QAAQ,SACRiD,MAAOa,EACP3E,SA9CS,SAAA6F,GACrBjB,EAAaiB,EAAE3F,OAAO4D,OACtBiF,QAAQC,IAAInD,EAAE3F,OAAO4D,QA8CTgC,SAAS,WAGb,eAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UAIA,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SAEI,cAACC,EAAA,EAAD,CACArH,OAAO,SACP+G,GAAG,4BACHO,MAAM,cACNG,WAAS,EACTC,KAAM,EACNC,aAAa,GACbnC,MAAOe,EACP7E,SA3DS,SAAA6F,GACrBf,EAAae,EAAE3F,OAAO4D,OACtBiF,QAAQC,IAAInD,EAAE3F,OAAO4D,QA0DTjD,QAAQ,aAOZ,cAAC2E,EAAA,EAAD,CAAOC,WAAS,EAACC,QAAQ,SAAzB,SAEI,cAAC,IAAD,CACArF,MAAO6C,GACPgD,gBAAc,EACdrF,QAAQ,SACRsF,OAAO,aACP7H,OAAO,SACP+G,GAAG,qBACHO,MAAM,cACN9B,MAAOU,EACPsB,SAAS,OACT9F,SA5FS,SAACoG,GACtB2C,QAAQC,IAAI5C,GACZ3B,EAAa2B,IA2FDC,oBAAqB,CACjB,aAAc,mBAUtB,eAACb,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UAEI,uBACA,cAAC,GAAD,CAAc7E,QAAQ,WAAWP,MAAM,UAAUV,QAvF3C,WAClBqF,IAEA,IAKMsC,EALa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OACpE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC7B/C,EAAUgD,YAGX,KAFZC,OAAOjD,EAAUkD,WAAWC,SAAS,EAAG,KAEf,IADxBnD,EAAUoD,cAGvBsB,GAAiBrB,KAAK,CAClBvG,eAAgB4H,GAAiBpB,OACjCpI,KAAMiF,EACNvD,YAAayD,EACboE,UAAW1B,KAyEH,iCCzNlB4B,GAAiBnB,UAAY,CAC3B7D,QAAS8D,IAAUC,KAAKC,WACxBhJ,KAAM8I,IAAUG,KAAKD,WACrB/D,cAAe6D,IAAUI,OAAOF,YAkEnBiB,OA9Df,WAGE,IAAIb,EAAMW,GAAiB9B,KAAK,SAACoB,EAAMC,GACrC,OAAO,gCACA,cAAC,GAAD,CAAkBhJ,MAAOyJ,GAAiBT,KAC9C,cAACC,EAAA,EAAD,CAAS7H,QAAQ,iBAND,EAUG9B,IAAMC,UAAS,GAVlB,mBAUdG,EAVc,KAURC,EAVQ,OAWqBL,IAAMC,SAAS,SAXpC,mBAWdoF,EAXc,KAWCuE,EAXD,KA4BnB,OAEQ,cADF,CACE,OAAKtI,MAAO,CAACuI,UAAW,UAAxB,UAEA,eAACC,EAAA,EAAD,CACE9K,UAAU,eACVsC,MAAO,CACH4C,MAAM,QACN3E,OAAO,QAJb,UAQE,oBAAI+B,MAAO,CAAC5B,SAAS,OAAOmK,UAAW,UAAvC,2BAGCL,EAGD,eAAC1G,EAAA,EAAD,CAAQjC,QAhCI,WACtBR,GAAQ,IA+BE,uBAA4C,cAAC,IAAD,IAA5C,UAEF,uBAGA,cAAC,GAAD,CAAkBgF,cAAeA,EAAejF,KAAMA,EAAMgF,QAhClD,SAACL,GACnB1E,GAAQ,GACRuJ,EAAiB7E,MAiCX,uBACA,uBACA,uBACA,2B,4BCxCNuF,GAAQ,CACV,QACA,KACA,QACA,QACA,SACA,iBACA,UAGWC,GAhDO,CAClB,CACI5J,KAAM,2BACN0B,YAAa,wCACbmI,aAAa,EACbtI,QAAQ,iBACRuI,UAAS,EACTC,iBAAiB,MAErB,CACI/J,KAAK,sBACL0B,YAAY,2DACZmI,aAAc,EACdtI,QAAQ,iBACRuI,UAAS,EACTC,iBAAiB,SAErB,CACI/J,KAAK,mBACL0B,YAAY,uDACZmI,aAAa,EACbtI,QAAQ,iBACRuI,UAAS,EACTC,iBAAiB,MAErB,CACI/J,KAAK,6BACL0B,YAAY,oDACZmI,aAAc,EACdtI,QAAQ,iBACRuI,UAAS,EACTC,iBAAiB,OCXnBzL,GAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MAmGL+K,OAxFf,SAAuB7K,GAErB,IAAMC,EAAUd,KAFW,EAGCe,IAAMC,UAAS,GAHhB,mBAGpBC,EAHoB,KAGZC,EAHY,OAIHH,IAAMC,UAAS,GAJZ,mBAIpBG,EAJoB,KAIdC,EAJc,OAKeL,IAAMC,SAAS,SAL9B,gCAMWD,IAAMC,UAAS,IAN1B,mBAOrB2K,GAPqB,UAN3B,WAA0B,IAAD,EACG3K,mBAAS,GADZ,mBACT4K,GADS,WAEvB,OAAO,kBAAMA,GAAS,SAAA9F,GAAK,OAAIA,EAAQ,MAWrB+F,IAgBdxK,EAAc,WAChBD,GAASD,IAYb,OAEE,cADA,CACA,iBAEA,eAACG,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAcC,QAASX,EAAMY,MAAMC,KAAMC,QAAM,EAACC,QAASP,IACxDF,EAAO,cAAC,IAAD,CAAYQ,QAAM,EAACC,QAASP,IAAiB,cAAC,IAAD,CAAYM,QAAM,EAACC,QAASP,IACjF,eAACwC,EAAA,EAAD,YACIhD,EAAMY,MAAM+J,UAAa,cAAC,KAAD,CAAmB5J,QAlC3B,SAACK,GAEtB8I,QAAQC,IAAInK,EAAMY,OAClBZ,EAAMY,MAAM+J,UAAW,EACvB,IAAIM,EAAeC,KAAKC,MAAMD,KAAKE,SAAWZ,GAAMvB,QAChDoC,EAAWb,GAAMS,GACrBjL,EAAMY,MAAMgK,iBAAmBS,EAC/BnB,QAAQC,IAAI,WAAWkB,GACvBP,OA2BG9K,EAAMY,MAAM+J,UACb,8BAEA,cAAC3J,EAAA,EAAD,CACAC,QACE,cAACC,EAAA,EAAD,CACEd,QAASA,EACTe,SAxBa,SAACC,GAClBf,EAAWe,EAAMC,OAAOjB,SACxB8J,QAAQC,IAAI/I,EAAMC,OAAOC,WAAWC,cAAcA,cAAcA,cAAcA,cAAcA,cAAcA,eAC1GH,EAAMC,OAAOC,WAAWC,cAAcA,cAAcA,cAAcA,cAAcA,cAAcA,cAAcA,cAAcC,MAAMhC,QAAU,OAC1I0K,QAAQC,IAAI/I,EAAMC,OAAOC,WAAWC,cAAcA,cAAcA,cAAcA,cAAcC,MAAMhC,UAqB9FqB,KAAK,WACLY,MAAM,YAGVC,eAAe,kBAOnB,cAACC,EAAA,EAAD,CAAUC,GAAItB,EAAMuB,QAAQ,OAAOC,eAAa,EAAhD,SACA,cAACC,EAAA,EAAD,CAAM7C,UAAWe,EAAQZ,KAAM2C,QAAQ,WAAvC,SACE,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYhD,UAAWe,EAAQN,MAAO8B,MAAM,gBAAgBU,cAAY,EAAxE,oBACQnC,EAAMY,MAAMwB,WAEpB,cAACF,EAAA,EAAD,CAAYF,QAAQ,KAAKK,UAAU,KAAnC,SACCrC,EAAMY,MAAMC,OAEb,eAACqB,EAAA,EAAD,CAAYhD,UAAWe,EAAQJ,IAAK4B,MAAM,gBAA1C,UACCzB,EAAMY,MAAM+J,UAAc,6CAAgB3K,EAAMY,MAAMgK,qBACrD5K,EAAMY,MAAM+J,UAAc,wDAG5B,cAACzI,EAAA,EAAD,CAAYF,QAAQ,QAAQK,UAAU,IAAtC,SACCrC,EAAMY,MAAM2B,yBC7FfI,I,OAAeC,YAAW,CAC5BvD,KAAM,CACJ,UAAU,CACRwD,gBAAiB,UACjBC,OAAQ,qBAEVC,KAAM,QACNtB,MAAO,UACPqB,OAAQ,sBAROF,CAUhBI,MAaC7D,GAAYC,aAAW,SAACgE,GAAD,MAAY,CACrCM,YAAa,CACXjE,OAAQ2D,EAAMO,QAAQ,GACtBrE,SAAU,IACVsE,SAAU,KAEZC,MAAO,CACLrE,QAAS,OACTsE,SAAU,QAEZC,KAAM,CACJtE,OAAQ,GAEVuE,QAAS,CACPC,UAAWb,EAAMO,QAAQ,QAKzBU,GAAgB,CAClBxB,gBAAgB,UAChBsB,aAAc,MACdG,QAAS,OACTF,MAAM,SAqMKkH,OAtJf,SAAuBtL,GAAO,IAEpBsF,EAAgCtF,EAAhCsF,QAASC,EAAuBvF,EAAvBuF,cAAejF,EAAQN,EAARM,KAFJ,GAKZnB,KACFqG,cAIsBtF,IAAMC,SAAS,KAVvB,gCAWMD,IAAMC,SAAS,IAAIuF,OAXzB,mBAWrBC,EAXqB,KAWVC,EAXU,OAYD1F,IAAMC,SAAS,CACtC0F,aAAc,SAbU,gCAeM3F,IAAMC,SAAS,KAfrB,mBAerB2F,EAfqB,KAeVC,EAfU,OAgBM7F,IAAMC,SAAS,IAhBrB,mBAgBrB6F,EAhBqB,KAgBVC,EAhBU,OAiBO/F,IAAMC,WAjBb,gCAkBqBD,IAAMC,SAAS,IAlBpC,mBAkBrBoL,EAlBqB,KAqBtBnF,GArBsB,KAqBR,WAChBd,EAAQC,KAgDZ,OAEE,cADA,CACCc,EAAA,EAAD,CAASf,QAASc,EAAaE,kBAAgB,sBAAsBhG,KAAMA,EAA3E,UACI,cAACiG,EAAA,EAAD,CAAaC,GAAG,sBAAhB,+BACA,eAAC,IAAD,CAAyBC,MAAOC,IAAhC,UAEI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACI,cAACC,EAAA,EAAD,CACAN,GAAG,+BACHO,MAAM,OACN/E,QAAQ,SACRiD,MAAOa,EACP3E,SAlDW,SAAA6F,GACrBjB,EAAaiB,EAAE3F,OAAO4D,OACtBiF,QAAQC,IAAInD,EAAE3F,OAAO4D,QAkDXgC,SAAS,WAGb,eAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UAGA,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SAEI,cAACC,EAAA,EAAD,CACArH,OAAO,SACP+G,GAAG,4BACHO,MAAM,cACNG,WAAS,EACTC,KAAM,EACNC,aAAa,GACbnC,MAAOe,EACP7E,SA7DW,SAAA6F,GACrBf,EAAae,EAAE3F,OAAO4D,OACtBiF,QAAQC,IAAInD,EAAE3F,OAAO4D,QA4DXjD,QAAQ,aAOZ,cAAC2E,EAAA,EAAD,CAAOC,WAAS,EAACC,QAAQ,SAAzB,SAEI,cAAC,IAAD,CACArF,MAAO6C,GACPgD,gBAAc,EACdrF,QAAQ,SACRsF,OAAO,aACP7H,OAAO,SACP+G,GAAG,qBACHO,MAAM,WACN9B,MAAOU,EACPsB,SAAS,OACT9F,SA9FW,SAACoG,GACtB2C,QAAQC,IAAI5C,GACZ3B,EAAa2B,IA6FHC,oBAAqB,CACjB,aAAc,mBAUtB,eAACb,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UAEI,uBACA,cAAC,GAAD,CAAc7E,QAAQ,WAAWP,MAAM,UAAUV,QAxFzC,WAClBqF,IAEA,IAKMsC,EALa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OACpE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC7B/C,EAAUgD,YAGX,KAFZC,OAAOjD,EAAUkD,WAAWC,SAAS,EAAG,KAEf,IADxBnD,EAAUoD,cAIvB0B,GAAczB,KAAK,CACfnI,KAAMiF,EACNvD,YAAayD,EACb5D,QAAQsG,EACRgC,aAAca,EACdZ,UAAS,EACTC,iBAAiB,QAuEX,iCClPhB1B,GAAKC,UAAY,CACf7D,QAAS8D,IAAUC,KAAKC,WACxBhJ,KAAM8I,IAAUG,KAAKD,WACrB/D,cAAe6D,IAAUI,OAAOF,YAiEnBkC,OA5Df,WAGA,IAAI9B,EAAMe,GAAclC,KAAK,SAACoB,EAAMC,GAChC,OAAO,gCACC,cAAC,GAAD,CAAehJ,MAAO6J,GAAcb,KACxC,cAACC,EAAA,EAAD,CAAS7H,QAAQ,iBANL,EAWI9B,IAAMC,UAAS,GAXnB,mBAWbG,EAXa,KAWPC,EAXO,OAYsBL,IAAMC,SAAS,SAZrC,mBAYboF,EAZa,KAYEuE,EAZF,KA4BlB,OAEQ,cADA,CACA,OAAK5K,UAAU,OAAOsC,MAAO,CAACuI,UAAU,UAAxC,UAEA,eAACC,EAAA,EAAD,CACE9K,UAAU,YACVS,MAAM,QACN6B,MAAO,CACH4C,MAAM,QACN3E,OAAO,QALb,UASI,oBAAI+B,MAAO,CAAC5B,SAAS,QAArB,wBAEC8J,EAED,eAAC1G,EAAA,EAAD,CAAQjC,QA9BE,WACtBR,GAAQ,IA6BI,uBAA4C,cAAC,IAAD,IAA5C,UAGJ,uBAGA,cAAC,GAAD,CAAMgF,cAAeA,EAAejF,KAAMA,EAAMgF,QA9BtC,SAACL,GACnB1E,GAAQ,GACRuJ,EAAiB7E,MA6BT,uBACA,uBACA,uBACA,2BCvEVwG,IAASC,OACR,eAAC,IAAMC,WAAP,WACC,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEDC,SAASC,eAAe,U","file":"static/js/main.07bc7fb3.chunk.js","sourcesContent":["import './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\tHello World\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport \"./ledgerStyle.css\";\n\n// Style variable for List Item Components\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\n// List Item Component\nfunction LedgerItem(props) {\n  const classes = useStyles();\n\n  // State variables for List Item\n  const [checked, setChecked] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n\n  // Function for handling the expanding of Item Description Card\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  // Function for handling the checkbox\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n    var mainDivStyle =\n      event.target.parentNode.parentElement.parentElement.parentElement\n        .parentElement.style;\n    mainDivStyle.display = \"none\";\n  };\n\n  // Return value for main Ledger Item Component\n  return (\n    // Encompassing Div\n    <div>\n      {/* Main list item component */}\n      <ListItem>\n        <ListItemText primary={props.items.name} button onClick={handleClick} />\n        {open ? (\n          <ExpandLess button onClick={handleClick} />\n        ) : (\n          <ExpandMore button onClick={handleClick} />\n        )}\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={handleChange}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          labelPlacement=\"start\"\n        />\n      </ListItem>\n      {/* Collapsible Card for ledger item description */}\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <Card className={classes.root} variant=\"outlined\">\n          <CardContent>\n            <Typography\n              className={classes.title}\n              color=\"textSecondary\"\n              gutterBottom\n            >\n              Due on {props.items.dueDate}\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              {props.items.name}\n            </Typography>\n            <Typography className={classes.pos} color=\"textSecondary\">\n              CAD ${props.items.amount}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              {props.items.description}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Collapse>\n    </div>\n  );\n}\n\nexport default LedgerItem;\n","const financesData = [\n    {\n        identityNumber: 1,\n        name: \"Rent\",\n        description: \"Montly Payments\",\n        dueDate: \"December 31,2020\",\n        amount: 2000,\n        payees: [\"Ahmed\",\"Mo\",\"Michael\",\"Scott\",\"Kyle\",\"Lowry\"]\n    },\n    {\n        identityNumber: 2,\n        name: \"Damages\",\n        description: \"Broken Wall In Living Room\",\n        dueDate:\"December 15,2020\",\n        amount: 200,\n        payees: [\"Ahmed\",\"Scott\",\"Kyle\"]\n    },\n    {\n        identityNumber: 3,\n        name: \"Groceries\",\n        description: \"Food, Drink etc - Walmart\",\n        amount: 150,\n        dueDate:\"December 12,2020\",\n        payees: [\"Ahmed\",\"Mo\",\"Michael\",\"Scott\",\"Kyle\",\"Lowry\"]\n    },\n    {\n        identityNumber: 4,\n        name: \"New TV\",\n        \n        description: \"Panasonic 50 Inch, For Living Room\",\n        dueDate:\"December 25,2020\",\n        amount: 2000,\n        payees: [\"Ahmed\",\"Mo\",\"Michael\",\"Scott\",\"Kyle\",\"Lowry\"]\n    },\n\n]\nconst userData = [\n    \"Ahmed\",\n    \"Mo\",\n    \"Pogba\",\n    \"Drake\",\n    \"Pascal\",\n    \"Jiminy Cricket\",\n    \"Bernie\"\n  ];\n\nexport {userData};\nexport default financesData;","import React, { useState } from 'react';\nimport { makeStyles, useTheme,withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DateFnsUtils from '@date-io/date-fns';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Chip from '@material-ui/core/Chip';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport financesData from './dummyData'\nimport './ledgerStyle.css'\n\n// Style Variable for Button\n\nconst StyledButton = withStyles({\n    root: {\n      '&:hover':{\n        backgroundColor: '#DEDEDE',\n        border: '1px solid #850044'\n      },\n      size: 'small',\n      color: '#850044',\n      border: '1px solid #850044'\n    }\n  })(Button);\n\n\n// Dummy data for user names\nconst names = [\n    \"Ahmed\",\n    \"Mo\",\n    \"Pogba\",\n    \"Drake\",\n    \"Pascal\",\n    \"Jiminy Cricket\",\n    \"Bernie\"\n  ];\n\n// Style function for userNames\nfunction getStyles(name, personName, theme) {\nreturn {\n    fontWeight:\n    personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n};\n}\n\n// Style function for form\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      maxWidth: 300,\n    },\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    chip: {\n      margin: 2,\n    },\n    noLabel: {\n      marginTop: theme.spacing(3),\n    },\n  }));\n\n// Style function for picker \nconst multPickerStyle={\n    backgroundColor:'#DEDEDE',\n    borderRadius:'3px',\n    width:\"190px\",\n}\n\n// Style function for date picker \nconst datePickerStyle={\n    backgroundColor:'#DEDEDE',\n    borderRadius: '3px',\n    padding: '15px',\n    width:'170px'\n}\n\n\n// Style variables\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\nPaperProps: {\n    style: {\n    maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n    width: 250,\n    maxWidth: 300,\n    },\n},\n};\n\n// Function to get props for number input customizations, (Adds a dollar sign for price)\nNumberFormatCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    };\nfunction NumberFormatCustom(props) {\nconst { inputRef, onChange, ...other } = props;\nreturn (\n    <NumberFormat\n    {...other}\n    getInputRef={inputRef}\n    onValueChange={(values) => {\n        onChange({\n        target: {\n            name: props.name,\n            value: values.value,\n        },\n        });\n    }}\n    thousandSeparator\n    isNumericString\n    prefix=\"$\"\n    />\n);\n}\n\n\n\n  \n\n// Functional component for Ledger Form\nfunction LedgerForm(props) {\n    // Prop constant destruction\n    const { onClose, selectedValue, open } = props;\n\n    // Style + Theme constants\n    const classes = useStyles();\n    const theme = useTheme();\n    // State variables for form inputs\n    const [personName, setPersonName] = React.useState([]);\n    const [dateValue, setDateValue] = React.useState(new Date());\n    const [values,setValues] = React.useState({\n        numberformat: '1320',\n    })\n    const [nameValue, setNameValue] = React.useState(\"\")\n    const [descValue, setDescValue] = React.useState(\"\")\n    const [priceValue,setPriceValue] = React.useState()\n    \n    // Function to close form on outer click or submit button\n    const handleClose = () => {\n        onClose(selectedValue);\n      };\n\n    // Gets and sets payees name input\n    const handleChange = (event) => {\n        setPersonName(event.target.value);\n      };\n  \n    // Gets and sets date input\n    const handleDateChange = (date) => {\n        setDateValue(date);\n\n      \n    };\n\n    // Gets and sets item name input\n    const handleNameChange = e =>{\n        setNameValue(e.target.value);\n\n    }\n\n    // Gets and sets description input\n    const handleDescChange = e =>{\n        setDescValue(e.target.value);\n\n    }\n    // Gets and sets price input\n    const handlePriceChange = e =>{\n        setPriceValue(e.target.value);\n\n    }\n\n    // Handles form submission + saving inputs in financesData array\n    const buttonClicked = () =>{\n        handleClose()\n\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        const month = monthNames[dateValue.getMonth()];\n        const day = String(dateValue.getDate()).padStart(2, '0');\n        const year = dateValue.getFullYear();\n        const output = month  + '\\n'+ day  + ',' + year;\n\n\n        financesData.push({\n            identityNumber: financesData.length,\n            name: nameValue,\n            description: descValue,\n            dueDate:output,\n            amount: priceValue,\n            payees: personName,\n            }\n        )\n\n\n    }\n  \n    // Return value for Form Component\n    return (\n\n        // Dialog box\n        <Dialog  onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n            <DialogTitle id=\"simple-dialog-title\">Add to Ledger</DialogTitle>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                {/* Form name grid component */}\n                <Grid container justify=\"center\">\n                    <TextField\n                    id=\"outlined-filled-basic-static\" \n                    label=\"Name\" \n                    variant=\"filled\"\n                    value={nameValue}\n                    onChange={handleNameChange}\n\n                    required=\"true\" />\n\n                </Grid>\n                <Grid container justify=\"center\">\n\n\n                {/* Form desc grid component */}\n                <Grid container justify=\"center\">\n\n                    <TextField\n                    margin=\"normal\"\n                    id=\"outlined-multiline-static\"\n                    label=\"Description\"\n                    multiline\n                    rows={4}\n                    defaultValue=\"\"\n                    value={descValue}\n                    onChange={handleDescChange}\n                    variant=\"filled\"\n                    \n                    />\n\n                </Grid>\n\n\n                {/* Form date grid component */}\n                <Grid  container justify=\"center\">\n\n                    <KeyboardDatePicker\n                    style={datePickerStyle}\n                    disableToolbar\n                    variant=\"filled\"\n                    format=\"MM/dd/yyyy\"\n                    margin=\"normal\"\n                    id=\"date-picker-inline\"\n                    label=\"Due Date\"\n                    value={dateValue}\n                    required=\"true\"\n                    onChange={handleDateChange}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                    />\n                \n                </Grid>\n\n                {/* Form price grid component */}\n                <Grid container justify=\"center\">\n\n                    <TextField\n                    value={priceValue}\n                    onChange={handlePriceChange}\n                    required=\"true\"\n                    variant=\"filled\"\n                    label=\"Price\"\n                    name=\"numberformat\"\n                    id=\"formatted-numberformat-input\"\n                    InputProps={{\n                    inputComponent: NumberFormatCustom,\n                    }}\n                    />\n                    <br></br>\n                </Grid>\n                {/* Form payees picker grid component */}\n                <Grid container justify=\"center\">\n                    <FormControl style={multPickerStyle} className={classes.formControl}>\n                    <InputLabel\n                    style={{\n                        paddingLeft: '10px',\n                    }}\n                    mx=\"auto\"\n                    p={30}\n                    id=\"demo-mutiple-chip-label\">\n                        Select Payees\n                    </InputLabel>\n                    <Select\n                    label=\"Select Payees\"\n                    labelId=\"demo-mutiple-chip-label\"\n                    id=\"demo-mutiple-chip\"\n                    multiple\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input id=\"select-multiple-chip\" />}\n                    renderValue={(selected) => (\n                        <div className={classes.chips}>\n                        {selected.map((value) => (\n                            <Chip key={value} label={value} className={classes.chip} />\n                        ))}\n                        </div>\n                    )}\n                    MenuProps={MenuProps}\n                    >\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                        {name}\n                        </MenuItem>\n                    ))}\n                    </Select>\n                    </FormControl>\n                </Grid>\n\n                {/* Form submit button grid component */}\n                <Grid container justify=\"center\">\n\n                    <br></br>\n                    <StyledButton variant=\"outlined\" color=\"primary\" onClick={buttonClicked}>\n                        Submit\n\n                    </StyledButton>\n\n                </Grid>\n\n            </Grid>\n\n            </MuiPickersUtilsProvider>\n            </Dialog>\n            )\n}\n    \n\nexport default LedgerForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport StarBorder from \"@material-ui/icons/StarBorder\";\nimport LedgerItem from \"./LedgerItem\";\nimport financesData from \"./dummyData\";\nimport { FixedSizeList } from \"react-window\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Form from \"./form\";\nimport Button from \"@material-ui/core/Button\";\n\n// Style Variable\nconst style = {\n  display: \"flex\",\n  textAlign: \"center\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  border: \"1px solid black\",\n  paddingLeft: \"20px\",\n};\n\n// Props for Form\nForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired,\n};\n\n// Main ledger component\nfunction Ledger() {\n  // Row variables to construct LedgerItem components\n  var Row = financesData.map((item, index) => {\n    return (\n      <div>\n        <LedgerItem items={financesData[index]} />\n        <Divider variant=\"middle\" />\n      </div>\n    );\n  });\n\n  // State variables for open and closing form\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(\"\");\n\n  // Function to open form\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  // Function to close form\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  // Return value for Ledger Component\n  return (\n    // Encompassing Div\n    <div style={{ textAlign: \"center\" }}>\n      {/* Material-UI List component start */}\n      <List\n        className=\"ledger\"\n        title=\"Ledger\"\n        style={{\n          width: \"300px\",\n          margin: \"auto\",\n          backgroundColor: \"#850044\",\n        }}\n      >\n        {/* Ledger Title */}\n        <h1 style={{ fontSize: \"30px\", textAlign: \"center\", color: \"white\" }}>\n          Ledger\n        </h1>\n        {/* LedgerItems Components */}\n        {Row}\n        {/* Button that opens form */}\n        <Button\n          onClick={handleClickOpen}\n          style={{ color: \"#F3C761\" }}\n        >\n          Add Item <AddIcon />{\" \"}\n        </Button>\n      </List>\n      <br></br>\n\n      {/* Form for adding items, initially hidden */}\n      <Form selectedValue={selectedValue} open={open} onClose={handleClose} />\n\n      {/* Breaks */}\n      <br></br>\n      <br></br>\n      <br></br>\n      <br></br>\n    </div>\n  );\n}\nexport default Ledger;\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport './shoppingListStyle.css'\n\n\n// Style variable for ShoppingList Item Components\nconst useStyles = makeStyles({\n    root: {\n      minWidth: 275,\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n  });\n\n// ShoppingList Item Component\nfunction ShoppingListItem(props){ \n  const classes = useStyles();\n\n  // State variables for ShoppingList Item\n  const [checked,setChecked]= React.useState(false);\n  const [open, setOpen] = React.useState(false);\n\n  // Function for handling the expanding of Item Description Card\n  const handleClick = () => {\n      setOpen(!open);\n    };\n\n  // Function for handling the checkbox\n  const handleChange = (event) =>{\n      setChecked(event.target.checked);\n      console.log(event.target.parentNode.parentElement.parentElement.parentElement.parentElement)\n      event.target.parentNode.parentElement.parentElement.parentElement.parentElement.style.display = \"none\";\n      console.log(event.target.parentNode.parentElement.parentElement.parentElement.parentElement.style.display)\n  }\n\n  // Return value for main Ledger Item Component\n  return(\n    // Encompassing Div\n      <div>\n    {/* Main ShoppingList item component */}\n      <ListItem>\n      <ListItemText primary={props.items.name} button onClick={handleClick} />\n      {open ? <ExpandLess button onClick={handleClick}/> : <ExpandMore button onClick={handleClick}/>}\n      <FormControlLabel\n      control={\n        <Checkbox\n          checked={checked}\n          onChange={handleChange}\n          name=\"checkedB\"\n          color=\"primary\"\n        />\n      }\n      labelPlacement=\"start\"\n    />\n    </ListItem>\n    {/* Collapsible Card for ledger item description */}\n    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n      <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Due on {props.items.dateAdded}\n          </Typography>\n          <Typography variant=\"h5\" component=\"h2\">\n          {props.items.name}\n          </Typography>\n          \n          <Typography variant=\"body2\" component=\"p\">\n          {props.items.description}\n          </Typography>\n      </CardContent>\n      </Card>\n    </Collapse>\n    </div>\n  )\n}\n\nexport default ShoppingListItem","const shoppingListData = [\n    {\n        \"identityNumber\":1,\n        \"name\": \"Red Apples\" ,\n        \"description\": \"\",\n        \"dateAdded\" :\"Jan 10th, 2021\"\n    },\n    {\n        \"identityNumber\":2,\n        \"name\": \"Baby Carrots\" ,\n        \"description\": \"\",\n        \"dateAdded\" :\"Jan 10th, 2021\"\n    },\n    {\n        \"identityNumber\":3,\n        \"name\": \"Garbage Bags\" ,\n        \"description\": \"The kind the tie up top\",\n        \"dateAdded\" :\"Jan 15th, 2021\"\n    }\n\n]\n\nexport default shoppingListData;","import React, { useState } from 'react';\nimport { makeStyles, useTheme,withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DateFnsUtils from '@date-io/date-fns';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\nimport Button from '@material-ui/core/Button';\nimport shoppingListData from './dummyData'\n\n// Style Variable for Button\nconst StyledButton = withStyles({\n    root: {\n      '&:hover':{\n        backgroundColor: '#DEDEDE',\n        border: '1px solid #850044'\n      },\n      size: 'small',\n      color: '#850044',\n      border: '1px solid #850044'\n    }\n  })(Button);\n\n\n// Style function for form\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      maxWidth: 300,\n    },\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    chip: {\n      margin: 2,\n    },\n    noLabel: {\n      marginTop: theme.spacing(3),\n    },\n  }));\n\n// Style function for date picker \nconst datePickerStyle={\n    backgroundColor:'#DEDEDE',\n    borderRadius: '3px',\n    padding: '15px',\n    width:'170px'\n}\n\n\n// Style variables\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\nPaperProps: {\n    style: {\n    maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n    width: 250,\n    maxWidth: 300,\n    },\n},\n};\n// Function to get props for number input customizations, (Adds a dollar sign for price)\nfunction NumberFormatCustom(props) {\nconst { inputRef, onChange, ...other } = props;\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  };  \nreturn (\n    <NumberFormat\n    {...other}\n    getInputRef={inputRef}\n    onValueChange={(values) => {\n        onChange({\n        target: {\n            name: props.name,\n            value: values.value,\n        },\n        });\n    }}\n    thousandSeparator\n    isNumericString\n    prefix=\"$\"\n    />\n);\n}\n\n\n// Functional component for Shopping Form\n\nfunction ShoppingListForm(props) {\n    // Prop constant destruction\n    const { onClose, selectedValue, open } = props;\n\n    // Style + Theme constants\n    const classes = useStyles();\n    const theme = useTheme();\n\n    // State variables for form inputs\n    const [personName, setPersonName] = React.useState([]);\n    const [dateValue, setDateValue] = React.useState(new Date());\n    const [values,setValues] = React.useState({\n        numberformat: '1320',\n    })\n    const [nameValue, setNameValue] = React.useState(\"\")\n    const [descValue, setDescValue] = React.useState(\"\")\n    const [priceValue,setPriceValue] = React.useState()\n    \n    // Function to close form on outer click or submit button\n    const handleClose = () => {\n        onClose(selectedValue);\n      };\n\n    // Gets and sets date input\n    const handleDateChange = (date) => {\n        console.log(date);\n        setDateValue(date);\n      \n    };\n\n    // Gets and sets item name input\n    const handleNameChange = e =>{\n        setNameValue(e.target.value);\n        console.log(e.target.value)\n\n    }\n    // Gets and sets description input\n    const handleDescChange = e =>{\n        setDescValue(e.target.value);\n        console.log(e.target.value)\n\n    }\n\n    // Handles form submission + saving inputs in shoppingListData array\n    const buttonClicked = () =>{\n        handleClose()\n\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        const month = monthNames[dateValue.getMonth()];\n        const day = String(dateValue.getDate()).padStart(2, '0');\n        const year = dateValue.getFullYear();\n        const output = month  + '\\n'+ day  + ',' + year;\n\n        shoppingListData.push({\n            identityNumber: shoppingListData.length,\n            name: nameValue,\n            description: descValue,\n            dateAdded: output\n            \n            }\n        )\n    }\n  \n    // Return value for Form Component\n    return (\n        // Dialog box\n        <Dialog  onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n            <DialogTitle id=\"simple-dialog-title\">Add to Shopping List</DialogTitle>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                {/* Form name grid component */}                \n                <Grid container justify=\"center\">\n                    <TextField\n                    id=\"outlined-filled-basic-static\" \n                    label=\"Item Name\" \n                    variant=\"filled\"\n                    value={nameValue}\n                    onChange={handleNameChange}\n\n                    required=\"true\" />\n\n                </Grid>\n                <Grid container justify=\"center\">\n\n\n                {/* Form desc grid component */}\n                <Grid container justify=\"center\">\n\n                    <TextField\n                    margin=\"normal\"\n                    id=\"outlined-multiline-static\"\n                    label=\"Description\"\n                    multiline\n                    rows={4}\n                    defaultValue=\"\"\n                    value={descValue}\n                    onChange={handleDescChange}\n                    variant=\"filled\"\n                    \n                    />\n\n                </Grid>\n\n                {/* Form date grid component */}\n                <Grid  container justify=\"center\">\n\n                    <KeyboardDatePicker\n                    style={datePickerStyle}\n                    disableToolbar\n                    variant=\"filled\"\n                    format=\"MM/dd/yyyy\"\n                    margin=\"normal\"\n                    id=\"date-picker-inline\"\n                    label=\"Purchase By\"\n                    value={dateValue}\n                    required=\"true\"\n                    onChange={handleDateChange}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                    />\n                \n                </Grid>\n\n\n                \n\n                {/* Form submit button grid component */}\n                <Grid container justify=\"center\">\n\n                    <br></br>\n                    <StyledButton variant=\"outlined\" color=\"primary\" onClick={buttonClicked}>\n                        Submit\n\n                    </StyledButton>\n\n                </Grid>\n\n            </Grid>\n\n            </MuiPickersUtilsProvider>\n            </Dialog>\n            )\n}\n    \n\nexport default ShoppingListForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ShoppingListItem from './shoppingListItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport Divider from '@material-ui/core/Divider';\nimport ShoppingListForm from './shoppingForm'\nimport shoppingListData from  './dummyData'\nimport Button from '@material-ui/core/Button';\n\n  \n\n  \n// Props for Form  \n  ShoppingListForm.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    selectedValue: PropTypes.string.isRequired,\n  };\n  \n  // Main ShoppingList component\n  function ShoppingList(){\n    \n  // Row variables to construct ShoppingListItem components\n    var Row = shoppingListData.map( (item, index) =>{ \n      return <div>\n             <ShoppingListItem items={shoppingListData[index]}/>\n         <Divider variant=\"middle\" />\n         </div>\n    })\n    // State variables for open and closing form \n    const [open, setOpen] = React.useState(false);\n    const [selectedValue, setSelectedValue] = React.useState(\"email\");\n      \n    // Function to open form\n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n\n    // Function to close form\n    const handleClose = (value) => {\n      setOpen(false);\n      setSelectedValue(value);\n    };\n  \n    \n  \n    \n    // Return value for ShoppingList Component\n      return (\n            // Encompassing Div\n              <div style={{textAlign: 'center'}}>\n              {/* Material-UI List component start */}\n              <List\n                className=\"shoppingList\"\n                style={{\n                    width:'300px',\n                    margin:'auto'\n                }}\n              >\n                {/* ShoppingList Title */}              \n                <h1 style={{fontSize:'30px',textAlign: 'center'}}>Shopping List</h1>\n                \n                {/* ShoppingListItems Components */}\n                {Row}\n              \n                {/* Button that opens form */}\n                <Button onClick={handleClickOpen}>Add Item  <AddIcon /> </Button>\n              </List>\n              <br></br>\n              \n              {/* Form for adding items, initially hidden */}\n              <ShoppingListForm selectedValue={selectedValue} open={open} onClose={handleClose} />\n            \n            {/* Breaks */}\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n              </div>\n        )\n    \n  }\n  export default ShoppingList;","const choreListData = [\n    {\n        name: \"Cleaning the Living Room\",\n        description: \"Spilage from Party + General Sweeping\",\n        peopleNeeded:2,\n        dueDate:\"June 20th 2020\",\n        assigned:false,\n        personAssignedTo:null\n    },\n    {\n        name:\"Shovelling the Snow\",\n        description:\"On the 11th, forecasted of 8 inches throughout the night\",\n        peopleNeeded: 2,\n        dueDate:\"June 20th 2020\",\n        assigned:true,\n        personAssignedTo:\"Ahmed\"\n    },\n    {\n        name:\"Do the groceries\",\n        description:\"Shopping List is Above, add money used to the ledger\",\n        peopleNeeded:1,\n        dueDate:\"June 20th 2020\",\n        assigned:false,\n        personAssignedTo:null\n    },\n    {\n        name:\"Moving the ping pong table\",\n        description:\"Move it from the living room back to the basement\",\n        peopleNeeded: 2,\n        dueDate:\"June 20th 2020\",\n        assigned:false,\n        personAssignedTo:null\n        \n    },\n    \n\n]\n\nconst users = [\n    \"Ahmed\",\n    \"Mo\",\n    \"Pogba\",\n    \"Drake\",\n    \"Pascal\",\n    \"Jiminy Cricket\",\n    \"Bernie\"\n]\n\nexport default choreListData;\nexport {users}","import React, { useState }from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport './choreListStyle.css'\nimport CachedRoundedIcon from '@material-ui/icons/CachedRounded';\nimport {users} from './dummyData'\n\n\n// Style variable for choreList Item Components\nconst useStyles = makeStyles({\n    root: {\n      minWidth: 275,\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n  });\n\n// Function to force component to re-render after change in data\n  function useForceUpdate(){\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n  }\n\n// ShoppingList Item Component\nfunction ChoreListItem(props){ \n  // State variables for ShoppingList Item\n  const classes = useStyles();\n  const [checked,setChecked]= React.useState(false);\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(\"email\");\n  const [detailsOpen, setDetailsOpen] = React.useState(false);\n  const forceUpdate = useForceUpdate();\n\n  // Function to randomied task\n  const randomizeTasks = (event) => {\n\n    console.log(props.items)\n    props.items.assigned = true\n    var randomNumber = Math.floor(Math.random() * users.length)\n    var userName = users[randomNumber]\n    props.items.personAssignedTo = userName\n    console.log(\"username\",userName)\n    forceUpdate();\n    \n  }\n\n  // Function for handling the expanding of Item Description Card\n  const handleClick = () => {\n      setOpen(!open);\n    };\n\n  // Function for handling the checkbox\n  const handleChange = (event) =>{\n      setChecked(event.target.checked);\n      console.log(event.target.parentNode.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement)\n      event.target.parentNode.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.style.display = \"none\";\n      console.log(event.target.parentNode.parentElement.parentElement.parentElement.parentElement.style.display)\n  }\n\n  // Return value for main choreList item component\n  return(\n    // Encompassing Div\n    <div>\n    {/* Main ShoppingList item component */}\n    <ListItem>\n    <ListItemText primary={props.items.name} button onClick={handleClick} />\n    {open ? <ExpandLess button onClick={handleClick}/> : <ExpandMore button onClick={handleClick}/>}\n    <Button>\n      {!props.items.assigned &&  <CachedRoundedIcon onClick={randomizeTasks}/>}\n      {props.items.assigned &&  \n      <div>\n      \n      <FormControlLabel\n      control={\n        <Checkbox\n          checked={checked}\n          onChange={handleChange}\n          name=\"checkedB\"\n          color=\"primary\"\n        />\n      }\n      labelPlacement=\"start\"\n    />\n    </div>}\n    </Button>\n  </ListItem>\n  \n  {/* Collapsible Card for ledger item description */}\n  <Collapse in={open} timeout=\"auto\" unmountOnExit>\n  <Card className={classes.root} variant=\"outlined\">\n    <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Due on {props.items.dueDate}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n        {props.items.name}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n        {props.items.assigned &&   <p>Assigned to {props.items.personAssignedTo}</p>}\n        {!props.items.assigned &&   <p>Currently Unassigned</p>}\n\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n        {props.items.description}\n        </Typography>\n    </CardContent>\n    </Card>\n  </Collapse>\n  </div>\n)\n}\n\nexport default ChoreListItem;","import React, { useState } from 'react';\nimport { spacing } from '@material-ui/system';\nimport { makeStyles, useTheme,withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DateFnsUtils from '@date-io/date-fns';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport NumberFormat from 'react-number-format';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Chip from '@material-ui/core/Chip';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport choreListData from './dummyData'\nimport './choreListStyle.css'\nimport ChoreListItem from './choreListItem'\nimport Divider from '@material-ui/core/Divider';\n\n// Style Variable for Button\nconst StyledButton = withStyles({\n    root: {\n      '&:hover':{\n        backgroundColor: '#DEDEDE',\n        border: '1px solid #850044'\n      },\n      size: 'small',\n      color: '#850044',\n      border: '1px solid #850044'\n    }\n  })(Button);\n\nconst names = [\n  \"Ahmed\",\n  \"Mo\",\n  \"Pogba\",\n  \"Drake\",\n  \"Pascal\",\n  \"Jiminy Cricket\",\n  \"Bernie\"\n  ];\n\n// Style function for form\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      maxWidth: 300,\n    },\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    chip: {\n      margin: 2,\n    },\n    noLabel: {\n      marginTop: theme.spacing(3),\n    },\n  }));\n\n// Style function for date picker \nconst datePickerStyle={\n    backgroundColor:'#DEDEDE',\n    borderRadius: '3px',\n    padding: '15px',\n    width:'170px'\n}\n\n\n// Style variables\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\nPaperProps: {\n    style: {\n    maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n    width: 250,\n    maxWidth: 300,\n    },\n},\n};\n\n// Function to get props for number input customizations, (Adds a dollar sign for price)\nfunction NumberFormatCustom(props) {\nconst { inputRef, onChange, ...other } = props;\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  };\n   \nreturn (\n    <NumberFormat\n    {...other}\n    getInputRef={inputRef}\n    onValueChange={(values) => {\n        onChange({\n        target: {\n            name: props.name,\n            value: values.value,\n        },\n        });\n    }}\n    thousandSeparator\n    isNumericString\n    prefix=\"$\"\n    />\n);\n}\n\n\n// Functional component for chore Form\nfunction ChoreListForm(props) {\n  // Prop constant destruction\n  const { onClose, selectedValue, open} = props;\n\n  // Style + Theme constants\n  const classes = useStyles();\n  const theme = useTheme();\n\n\n  // State variables for form inputs\n  const [personName, setPersonName] = React.useState([]);\n  const [dateValue, setDateValue] = React.useState(new Date());\n  const [values,setValues] = React.useState({\n      numberformat: '1320',\n  })\n  const [nameValue, setNameValue] = React.useState(\"\")\n  const [descValue, setDescValue] = React.useState(\"\")\n  const [priceValue,setPriceValue] = React.useState()\n  const [peopleNeededValue,setpeopleNeededValue] = React.useState(0)\n  \n  // Function to close form on outer click or submit button\n  const handleClose = () => {\n      onClose(selectedValue);\n    };\n\n  // Gets and sets date input\n  const handleDateChange = (date) => {\n      console.log(date);\n      setDateValue(date);\n  };\n\n  // Gets and sets item name input\n  const handleNameChange = e =>{\n      setNameValue(e.target.value);\n      console.log(e.target.value)\n\n  }\n\n  // Gets and sets description input\n  const handleDescChange = e =>{\n      setDescValue(e.target.value);\n      console.log(e.target.value)\n\n  }\n  \n\n  // Handles form submission + saving inputs in choreListData array\n  const buttonClicked = () =>{\n      handleClose()\n\n      const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      const month = monthNames[dateValue.getMonth()];\n      const day = String(dateValue.getDate()).padStart(2, '0');\n      const year = dateValue.getFullYear();\n      const output = month  + '\\n'+ day  + ',' + year;\n\n\n      choreListData.push({\n          name: nameValue,\n          description: descValue,\n          dueDate:output,\n          peopleNeeded: peopleNeededValue,\n          assigned:false,\n          personAssignedTo:null\n          }\n      )\n\n  }\n  // Return value for Form Component\n  return (\n    // Dialog box\n    <Dialog  onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">Add to Chore List</DialogTitle>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            {/* Form name grid component */}                \n            <Grid container justify=\"center\">\n                <TextField\n                id=\"outlined-filled-basic-static\" \n                label=\"Name\" \n                variant=\"filled\"\n                value={nameValue}\n                onChange={handleNameChange}\n\n                required=\"true\" />\n\n            </Grid>\n            <Grid container justify=\"center\">\n\n            {/* Form desc grid component */}\n            <Grid container justify=\"center\">\n\n                <TextField\n                margin=\"normal\"\n                id=\"outlined-multiline-static\"\n                label=\"Description\"\n                multiline\n                rows={4}\n                defaultValue=\"\"\n                value={descValue}\n                onChange={handleDescChange}\n                variant=\"filled\"\n                \n                />\n\n            </Grid>\n\n            {/* Form date grid component */}\n            <Grid  container justify=\"center\">\n\n                <KeyboardDatePicker\n                style={datePickerStyle}\n                disableToolbar\n                variant=\"filled\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"date-picker-inline\"\n                label=\"Due Date\"\n                value={dateValue}\n                required=\"true\"\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                }}\n                />\n            \n            </Grid>\n\n\n\n        \n            {/* Form submit button grid component */}\n            <Grid container justify=\"center\">\n\n                <br></br>\n                <StyledButton variant=\"outlined\" color=\"primary\" onClick={buttonClicked}>\n                    Submit\n\n                </StyledButton>\n\n            </Grid>\n\n        </Grid>\n\n        </MuiPickersUtilsProvider>\n        </Dialog>\n        )\n}\n    \n\nexport default ChoreListForm;\n","import React, { useState }from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ChoreListItem from './choreListItem';\nimport choreListData from './dummyData'\nimport AddIcon from '@material-ui/icons/Add';\nimport Divider from '@material-ui/core/Divider';\nimport Form from './choreListForm'\nimport {users} from './dummyData'\nimport './choreListStyle.css'\nimport Button from '@material-ui/core/Button';\n\n\n\n\n// Props for Form  \nForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedValue: PropTypes.string.isRequired,\n};\n\n\n// Main ChoreList component\nfunction ChoreList(){\n\n// Row variables to construct ShoppingListItem components\nvar Row = choreListData.map( (item, index) =>{ \n    return <div>\n            <ChoreListItem items={choreListData[index]}/>\n        <Divider variant=\"middle\" />\n        </div>\n})\n  \n// State variables for open and closing form \nconst [open, setOpen] = React.useState(false);\nconst [selectedValue, setSelectedValue] = React.useState(\"email\");\n\n// Function to open form\nconst handleClickOpen = () => {\n  setOpen(true);\n};\n\n\n// Function to close form\nconst handleClose = (value) => {\n  setOpen(false);\n  setSelectedValue(value);\n};\n\n\n  // Return value for ShoppingList Component\n  return (\n          // Encompassing Div\n          <div className=\"main\" style={{textAlign:\"center\"}}>\n          {/* Material-UI List component start */}\n          <List\n            className=\"choreList\"\n            title=\"Chore\"\n            style={{\n                width:'300px',\n                margin:'auto'\n            }}\n          >\n              {/* ShoppingList Title */}              \n              <h1 style={{fontSize:'30px'}}>Chore List</h1>\n              {/* ShoppingListItems Components */}\n              {Row}\n              {/* Button that opens form */}              \n              <Button onClick={handleClickOpen}>Add Chore <AddIcon /> </Button>\n\n          </List>\n          <br></br>\n\n            {/* Form for adding items, initially hidden */}          \n          <Form selectedValue={selectedValue} open={open} onClose={handleClose}/>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          </div>\n    )\n\n}\nexport default ChoreList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Ledger from './managementTab/ledger/Ledger'\nimport ShoppingList from './managementTab/shoppingList/shoppingList'\nimport ChoreList from './managementTab/choreList/choreList'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t\t<Ledger/>\n\t\t<ShoppingList/>\n\t\t<ChoreList/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}